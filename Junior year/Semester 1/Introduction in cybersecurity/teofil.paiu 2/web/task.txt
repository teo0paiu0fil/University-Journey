# CatzBook - Website & [Social] Networking

Dear D0g3H4xx3r,

I'm hoping you can help me with a problem:
I caught my cat napping over my laptop. When I checked it out, my browser's
history had this new website, "Catzbook" - a self-proclaimed social network
for felidae, but I can't seem to access it (it disappeared from the
Internet, is that even possible?).

Oh, I also found some suspicious crypto files and a script, I'll leave them
alongside this message.

Find out whatever you can about this mysterious website:

1. First: discover a way to get in (find out the web server, tunnel in, create 
   an account etc.) and see what hides behind!
2. Once you get in, try to become friends with the website's admin to be able
   see any important posts (maybe try social engineering + an XSS attack?).
3. See if you can download the website's source code? you may find some hidden 
   secrets within!
4. You also need to search through its database for any flagged information (it
   should use SQL, so it's gonna be easy peasy for someone like you).
5. Meanwhile, scan the internal network, see if you can find any unusual traffic!
6. Finally, try to obtain execution rights on the server and find out any
   sensitive credentials (e.g., inside specific .php files).

Good luck, 31337 one!

----------------

Note: Most tasks can be solved independently (or with minimal dependencies,
aka subtask 1)!

For each of the subtasks above (1-6), you will find a specific flag which you
will need to persist as proof of your deeds (one is bonus!).

Also beware: the network container is reset everytime you disconnect, so it's
mandatory to save your progress (code / commands / actions taken) inside a 
text file (e.g., a Readme) or folder!


Access instructions:
====================

You will use SSH Tunnel Forwarding to access the website (after finding its
address and running the tunneling script from your shell container, ofc) by
going to http://localhost:8080 from your browser.

Initial connection scripts are provided (bash and powershell), though they might
need minor tweaks. Here's how the infrastructure works:

The server spawns individual Docker containers (including database) for each SSH
user session and allocates a random port to use for forwarding the HTTP
protocol, so we will use the OpenSSH client connection multiplexing feature to
keep the session open throughout this process:

- the SSH client will establish a persistent connection to the task server; the
  server will allocate dedicated resources to your client (i.e., random
  container port);
- script will ask the server to return your random web port number;
- after that, it will configure SSH to forward the port previously discovered as
  ':8080' on your machine;
- finally, the script will start the shell container; from now on, keep the
  terminal up and you will be able to access the website using a browser on your
  local machine (after reaching that task);
- if you close the connection, the server will clean up all resources
  allocated for you (so WARNING: everything you posted / modified on any container
  is lost, you will need to repeat some steps again, so make sure to record
  them e.g. in a readme; the flags / credentials / other variables are static
  and do not change between your personalized instances); there is also a 60m
  time limit for each connection!

**Note for Windows users**: OpenSSH for Windows doesn't support control master
/ session multiplexing. Try to use WSL (Windows Subsystem for Linux) if
possible. Otherwise, install Putty and Plink (command line client, bundled if
you use the Putty installer) and use the provided Powershell script
(`connect-putty.ps1`, read the script's code).
With Putty, don't forget to convert the private SSH key to PPK format (it
doesn't speak PEM). Ofc, Google it!

For modern, POSIX-compatible OSes (and WSL), the bash script should work out of
the box.
For WSL2, you might need to use the Linux virtual machine's IP address instead
of 'localhost'.

Infrastructure Errata:

- Docker changes the network IP prefix (e.g., '192.168.X.0') every time you
  reconnect to ssh; but don't worry, the last byte of the address remains the
  same and the tunneling script automatically replaces the IP prefix, so you can
  keep using your previously discovered address!

Also, please stop your hacking after obtaining all flags (i.e., container
execution rights). And NO DENIAL OF SERVICE please (e.g., forkbomb - although
limited, just don't do it!)!


Notes / hints:
==============

 - you have several network utilities installed inside the remote shell, check
   them out :P this also applies to task 5!
 - Always **read the source**, Luke!
 - the XSS attack is available through the messages function, you just need to
   build an appropiate HTML + JavaScript code to "make friends"; note: it's
   a multi-stage attack (since you cannot send a message directly to the boss,
   you must use a common friend for that :P).
 - another tip for the XSS attack: you can print debugging info from the
   victim's execution context using JS `console.log()` and see it in your
   browser's developer console, try it out!
 - check out the boss' posts! they usually contain important clues :P 
 - for SQL Injection, most fields are not vulnerable, so find out the proper
   parameter to exploit!
 - !!! SPOILERS !!! FOR THE BONUS TASK (hah sorry, it's not that simple :P):
   Lws tlwk nmabmcesadxhg tw r ugbdtpb wadt ixwsrv + HWD kzhv wptqcemff tju bsek
   oaaz iwpfo qdi bz wvsjrv bsi jwjksz'd jzdwhmaeid sfs tmegy lzt zidx (sgfjg) nwex:
    * qgjf qxexw ejgb mi msdxr nzv jwjksz XMDW uwskvw kg hpga!
    * diinwg kwy'x vpwribp eeq .hwda trjavt hpp tygld ixwsrv vxfmnxfjq! lczv
      eigmcr bsmj;
    * lzt acwxzhsgh/nzvd-vsio ntpv fsbs bcemwjhot OSVK FDH ezvb (HZE
      ocesdslxqiwpp klgwxd eeq hphp avvxam tzzq kzw jgmc exwfi dzzzzvws bixi);
    * kzw pfksmkwuiizp sw lzt oxapzusiwwy mj s EKQ (Uzhvd - Nxse - Nseljdztpv)
      msjxove; aywf ncc div s kesktjzu wgfwc, jzymgs wfx r osn hw pbgdgxh qe ;)
    * cfm ejgb nvrxl EVX nsuw ld zqdx rdd uwtpw zfkxrm elv owq fwzx, kzwc fmlh
      kzw dbm nselsxbqyk jwugsbd, i.x. vsiojlwv ujtrmyxzsdh sbn.
  (do not try ChatGPT on this, the results are hillariously bad!)


Remember: 6 flags x 20% each => 5 flags for 100%, 1 bonus
(assignment score will get scaled to 1.5p final grade / bonus gets truncated :( )!


GL HF!

# vim: ft=text tw=80

